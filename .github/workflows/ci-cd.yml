name: CI/CD

on:
  push:
  pull_request:

env:
  DOCKER_BUILDX_VERSION: '0.3.1'
  DOCKER_COMPOSE_VERSION: '1.25.4'
  DOCKER_REGISTRY: registry.gitlab.com
  SYMFONY_ENDPOINT: https://flex.symfony.com/r/github.com/symfony/recipes-contrib/934

jobs:
  docker-build-test-deploy:
    name: Docker build/test/deploy (Docker ${{ matrix.docker }})
    runs-on: ubuntu-latest
    container:
      image: docker:${{ matrix.docker }}
      env:
        DOCKER_CERT_PATH: /certs/client
        DOCKER_CLI_EXPERIMENTAL: enabled
        DOCKER_HOST: tcp://docker:2376
        DOCKER_TLS_VERIFY: '1'
      options: >-
        -v /tmp/docker/certs/client:/certs/client
    services:
      docker:
        image: docker:${{ matrix.docker }}-dind
        env:
          DOCKER_TLS_CERTDIR: /certs
        options: >-
          --privileged
          -v /home/runner/work:/__w
          -v /tmp/docker/certs:/certs
          --health-cmd "docker info"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      matrix:
        docker:
          - '19.03'
      fail-fast: false
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install system packages
        run: |
          apk add \
            curl \
            jq \
      - name: Install Docker Buildx
        run: |
          mkdir -p ~/.docker/cli-plugins
          curl -fsSL -o ~/.docker/cli-plugins/docker-buildx "https://github.com/docker/buildx/releases/download/v${DOCKER_BUILDX_VERSION}/buildx-v${DOCKER_BUILDX_VERSION}.linux-amd64"
          chmod +x ~/.docker/cli-plugins/docker-buildx
      - name: Install Docker Compose
        run: |
          docker create --name docker_compose "docker/compose:alpine-${DOCKER_COMPOSE_VERSION}"
          docker cp docker_compose:/usr/local/bin/docker-compose /usr/local/bin/docker-compose
          docker rm docker_compose
      - name: Create builder instance
        run: |
          docker context create default_tls
          docker buildx create --driver docker-container --driver-opt image=moby/buildkit:master,network=host --use default_tls
      - name: Build images
        run: |
          docker buildx bake \
            --pull \
            --set api.args.BUILDKIT_INLINE_CACHE=1 \
            --set api.output=type=docker \
            --set php.args.BUILDKIT_INLINE_CACHE=1 \
            --set php.output=type=docker \
            --set cache-proxy.args.BUILDKIT_INLINE_CACHE=1 \
            --set cache-proxy.output=type=docker \
      - name: Validate composer.json
        run: |
          if jq -e '.extra.symfony.id != null' api/composer.json > /dev/null; then
            echo 'api/composer.json must not have extra.symfony.id' 1>&2
            exit 1
          fi
          docker-compose run --no-deps --entrypoint '' --rm -T php composer validate --no-check-publish
      - name: Start services
        run: docker-compose up -d
      - name: Wait for services
        run: |
          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose ps -q php)")"; do
            case $status in
              starting) sleep 1;;
              healthy) exit 0;;
              unhealthy) exit 1;;
            esac
          done
          exit 1
      - name: Check security vulnerabilities
        run: |
          docker-compose exec -T php curl -fsSL -o /usr/local/bin/security-checker https://get.sensiolabs.org/security-checker.phar
          docker-compose exec -T php chmod +x /usr/local/bin/security-checker
          docker-compose exec -T php security-checker security:check
      - name: Check PHP is ready to handle connections
        run: |
          if echo "$(docker-compose logs php)" | grep -q "NOTICE: ready to handle connections"; then
            exit 0
          else
            sleep 1
          fi
      - name: Check HTTP reachability
        run: | # we have to connect to the "docker" hostname because of Docker-in-Docker - wait 5 seconds for varnish probe
          sleep 5 && curl -fk -H 'Host: localhost' https://docker:8443 # API
      - name: Login to registry
        if: github.event_name == 'push' && github.repository == 'components-web-app/components-web-app' && github.ref == 'refs/heads/master'
        run: echo '${{ secrets.DOCKER_PASSWORD }}' | docker login --username '${{ secrets.DOCKER_USERNAME }}' --password-stdin "$DOCKER_REGISTRY"
      - name: Push images
        if: github.event_name == 'push' && github.repository == 'components-web-app/components-web-app' && github.ref == 'refs/heads/master'
        run: |
          docker-compose push \
            api \
            php \
            cache-proxy \

#  docker-build-test-deploy-prod:
#    name: Docker build/test/deploy (Docker ${{ matrix.docker }}) (production)
#    runs-on: ubuntu-latest
#    container:
#      image: docker:${{ matrix.docker }}
#      env:
#        DOCKER_CERT_PATH: /certs/client
#        DOCKER_CLI_EXPERIMENTAL: enabled
#        DOCKER_HOST: tcp://docker:2376
#        DOCKER_TLS_VERIFY: '1'
#      options: >-
#        -v /tmp/docker/certs/client:/certs/client
#    services:
#      docker:
#        image: docker:${{ matrix.docker }}-dind
#        env:
#          DOCKER_TLS_CERTDIR: /certs
#        options: >-
#          --privileged
#          -v /home/runner/work:/__w
#          -v /tmp/docker/certs:/certs
#          --health-cmd "docker info"
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#    strategy:
#      matrix:
#        docker:
#          - '19.03'
#      fail-fast: false
#    timeout-minutes: 10
#    env:
#      API_HOST: api.127-0-0-1.sslip.io
#      APP_SECRET: 3c857494cfcc42c700dfb7a6
#      CORS_ALLOW_ORIGIN: ^http://(?:\w+\.)?127-0-0-1\.sslip\.io$
#      DATABASE_URL: postgres://api-platform:4e3bc2766fe81df300d56481@db/api
#      MERCURE_ALLOW_ANONYMOUS: '0'
#      MERCURE_CORS_ALLOWED_ORIGINS: http://127-0-0-1.sslip.io,http://admin.127-0-0-1.sslip.io
#      MERCURE_HOST: mercure.127-0-0-1.sslip.io
#      MERCURE_JWT_KEY: 4121344212538417de3e2118
#      MERCURE_JWT_SECRET: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtZXJjdXJlIjp7InN1YnNjcmliZSI6WyJmb28iLCJiYXIiXSwicHVibGlzaCI6WyJmb28iXX19.B0MuTRMPLrut4Nt3wxVvLtfWB_y189VEpWMlSmIQABQ
#      MERCURE_SUBSCRIBE_URL: http://mercure.127-0-0-1.sslip.io/.well-known/mercure
#      NGINX_IMAGE: registry.gitlab.com/components-web-app/nginx
#      PHP_IMAGE: registry.gitlab.com/components-web-app/php
#      POSTGRES_PASSWORD: 4e3bc2766fe81df300d56481
#      REACT_APP_API_ENTRYPOINT: http://api.127-0-0-1.sslip.io
#      TRUSTED_HOSTS: ^(?:localhost|api|api\.127-0-0-1\.sslip\.io)$
#      VARNISH_IMAGE: registry.gitlab.com/components-web-app/varnish
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#      - name: Install system packages
#        run: |
#          apk add \
#            curl \
#      - name: Install Docker Buildx
#        run: |
#          mkdir -p ~/.docker/cli-plugins
#          curl -fsSL -o ~/.docker/cli-plugins/docker-buildx "https://github.com/docker/buildx/releases/download/v${DOCKER_BUILDX_VERSION}/buildx-v${DOCKER_BUILDX_VERSION}.linux-amd64"
#          chmod +x ~/.docker/cli-plugins/docker-buildx
#      - name: Install Docker Compose
#        run: |
#          docker create --name docker_compose "docker/compose:alpine-${DOCKER_COMPOSE_VERSION}"
#          docker cp docker_compose:/usr/local/bin/docker-compose /usr/local/bin/docker-compose
#          docker rm docker_compose
#      - name: Create builder instance
#        run: |
#          docker context create default_tls
#          docker buildx create --driver docker-container --driver-opt image=moby/buildkit:master,network=host --use default_tls
#      - name: Fetch production setup
#        run: wget -O - https://github.com/api-platform/docker-compose-prod/archive/master.tar.gz | tar -xzf - && mv docker-compose-prod-master docker-compose-prod
#      - name: Build images
#        run: |
#          docker-compose -f docker-compose-prod/docker-compose.build.yml config > docker-compose.bake.yml
#          docker buildx bake \
#            -f docker-compose.bake.yml \
#            --pull \
#            --set api.args.BUILDKIT_INLINE_CACHE=1 \
#            --set api.output=type=docker \
#            --set cache-proxy.args.BUILDKIT_INLINE_CACHE=1 \
#            --set cache-proxy.output=type=docker \
#            --set php.args.BUILDKIT_INLINE_CACHE=1 \
#            --set php.output=type=docker \
#      - name: Add HTTP redirect
#        run: |
#          mkdir -p docker-compose-prod/docker/nginx-proxy/vhost.d
#          echo 'return 301 http://127-0-0-1.sslip.io$request_uri;' > docker-compose-prod/docker/nginx-proxy/vhost.d/www.127-0-0-1.sslip.io
#      - name: Start services
#        run: docker-compose -f docker-compose-prod/docker-compose.yml up -d
#      - name: Wait for services
#        run: |
#          while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker-compose -f docker-compose-prod/docker-compose.yml ps -q php)")"; do
#            case $status in
#              starting) sleep 1;;
#              healthy) exit 0;;
#              unhealthy) exit 1;;
#            esac
#          done
#          exit 1
#      - name: Check HTTP reachability
#        run: | # we have to connect to the "docker" hostname because of Docker-in-Docker
#          curl -fk -H 'Host: 127-0-0-1.sslip.io' http://docker
#          curl -fk -H 'Host: api.127-0-0-1.sslip.io' http://docker
#      - name: Login to registry
#        if: github.event_name == 'push' && github.repository == 'components-web-app/components-web-app' && github.ref == 'refs/heads/master'
#        run: echo '${{ secrets.DOCKER_PASSWORD }}' | docker login --username '${{ secrets.DOCKER_USERNAME }}' --password-stdin "$DOCKER_REGISTRY"
#      - name: Push images
#        if: github.event_name == 'push' && github.repository == 'components-web-app/components-web-app' && github.ref == 'refs/heads/master'
#        run: |
#          docker-compose -f docker-compose-prod/docker-compose.build.yml push \
#            cache-proxy \

  ct-lint:
    name: ct lint (ct ${{ matrix.ct }})
    runs-on: ubuntu-latest
    container:
      image: quay.io/helmpack/chart-testing:v${{ matrix.ct }}
    strategy:
      matrix:
        ct:
          - '2.4.0'
      fail-fast: false
    timeout-minutes: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Lint
        run: ct lint --all --chart-dirs api/_helm/api
