image: alpine:latest

variables:
  BUILD_DISABLED: "false"
  TEST_DISABLED: "false"
  CODE_QUALITY_DISABLED: "false"
  LICENSE_MANAGEMENT_DISABLED: "true"
  PERFORMANCE_DISABLED: "false"
  SAST_DISABLED: "true"
  DEPENDENCY_SCANNING_DISABLED: "true"
  CONTAINER_SCANNING_DISABLED: "true"
  DAST_DISABLED: "true"
  STAGING_ENABLED: "true"
  CANARY_ENABLED: "true"

cache:
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
  paths:
    - api/vendor/

stages:
  - build
  - test
  - review
  - dast
  - staging
  - canary
  - production
  - performance
  - cleanup

before_script:
  - source ./bin/auto-devops.sh

build:
  stage: build
  image: docker:stable-git
  services:
    - docker:stable-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - install_dependencies
    - setup_docker
    - build
  only:
    - branches
  except:
    variables:
      - $BUILD_DISABLED == "true"

unit tests:
  image: $CI_REGISTRY_IMAGE/php:$CI_COMMIT_REF_SLUG
  stage: test
  script:
    - run_phpunit
  artifacts:
    reports:
      junit: api/build/logs/phpunit/junit.xml
  needs:
    - job: build
      optional: true
  except:
    variables:
      - $TEST_DISABLED == "true"

behat tests:
  stage: test
  image: $CI_REGISTRY_IMAGE/php:$CI_COMMIT_REF_SLUG
  variables:
    COMPOSER_PACKAGIST_TOKEN: 1548c14cbc7ef945787cad19913d10ef73068d7cdc61ff19513bfb4f72ea
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: "password"
    POSTGRES_DB: test
    POSTGRES_HOST_AUTH_METHOD: trust
  allow_failure: false
  services:
    - postgres:latest
  script:
    - setup_test_db
    - run_behat
  dependencies: [ ]
  needs:
    - job: build
      optional: true
  only:
    - branches
  artifacts:
    reports:
      junit: api/build/logs/behat/junit/default.xml
  except:
    variables:
      - $TEST_DISABLED == "true"

review pwa:
  stage: review
  script:
    - deploy_vercel_pwa review
  environment:
    name: review/$CI_COMMIT_REF_NAME/pwa
    url: https://$CI_COMMIT_REF_SLUG-review.$KUBE_INGRESS_BASE_DOMAIN
    auto_stop_in: 1 hour
  only:
    refs:
      - branches
  needs: []
  except:
    refs:
      - main
    variables:
      - $REVIEW_DISABLED == "true"

review api:
  stage: review
  script:
    - check_kube_domain
    - install_dependencies
    - helm_init
    - apply_kube_context
    - ensure_namespace
    - create_secret
    - deploy_api review
    - persist_environment_url
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_COMMIT_REF_SLUG-review.$KUBE_INGRESS_BASE_DOMAIN
    on_stop: stop review
  artifacts:
    paths: [ environment_url.txt ]
  only:
    refs:
      - branches
  needs:
    - job: 'unit tests'
      optional: true
    - job: 'behat tests'
      optional: true
  except:
    refs:
      - main
    variables:
      - $REVIEW_DISABLED == "true"

staging pwa:
  stage: staging
  script:
    - deploy_vercel_pwa staging
  environment:
    name: production/pwa
    url: https://staging.$KUBE_INGRESS_BASE_DOMAIN
    auto_stop_in: 1 hour
  needs: []
  only:
    refs:
      - main
    variables:
      - $STAGING_ENABLED == "true"
  allow_failure: false

staging api:
  retry: 1
  stage: staging
  script:
    - check_kube_domain
    - install_dependencies
    - helm_init
    - apply_kube_context
    - ensure_namespace
    - create_secret
    - deploy_api staging
  environment:
    name: production
    url: https://staging.$KUBE_INGRESS_BASE_DOMAIN
  needs:
    - job: 'unit tests'
      optional: true
    - job: 'behat tests'
      optional: true
  only:
    refs:
      - main
    variables:
      - $STAGING_ENABLED == "true"
  allow_failure: false

production pwa:
  stage: production
  script:
    - deploy_vercel_pwa
  environment:
    name: production/pwa
    url: https://$KUBE_INGRESS_BASE_DOMAIN
  when: manual
  retry: 1
  allow_failure: false
  only:
    refs:
      - main
  needs:
    - job: 'staging pwa'
      optional: true
  except:
    variables:
      - $PRODUCTION_PWA_DISABLED == "true"

production api:
  stage: production
  script:
    - check_kube_domain
    - install_dependencies
    - helm_init
    - apply_kube_context
    - ensure_namespace
    - create_secret
    - deploy_api
    - delete canary
    - delete staging
    - persist_environment_url
  environment:
    name: production
    url: https://$KUBE_INGRESS_BASE_DOMAIN
  artifacts:
    paths: [ environment_url.txt ]
  when: manual
  retry: 1
  allow_failure: false
  needs:
    - job: 'staging api'
      optional: true
  only:
    refs:
      - main
  except:
    variables:
      - $PRODUCTION_API_DISABLED == "true"

performance:
  stage: performance
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - setup_docker
    - performance
  artifacts:
    paths:
      - performance.json
      - sitespeed-results/
  only:
    refs:
      - branches
    kubernetes: active
  when: manual
  except:
    variables:
      - $PERFORMANCE_DISABLED == "true"

stop review:
  stage: cleanup
  script:
    - install_dependencies
    - apply_kube_context
    - delete
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
  needs: ['review api']
  except:
    refs:
      - main
    variables:
      - $REVIEW_DISABLED == "true"

canary api:
  stage: canary
  script:
    - check_kube_domain
    - install_dependencies
    - ensure_namespace
    - helm_init
    - apply_kube_context
    - create_secret
    - deploy_api canary
  environment:
    name: production
    url: https://$KUBE_INGRESS_BASE_DOMAIN
  when: manual
  needs:
    - job: 'staging api'
      optional: true
  only:
    refs:
      - main
    variables:
      - $CANARY_ENABLED == "true"
