image: alpine:latest

variables:
  BUILD_DISABLED: "false"
  TEST_DISABLED: "false"
  STAGING_ENABLED: "true"
  CANARY_ENABLED: "true"
  PERFORMANCE_DISABLED: "false"

stages:
  - build
  - test
  - review
  - staging
  - canary
  - production
  - performance
  - cleanup

before_script:
  - source ./bin/devops/setup.sh
  - source ./bin/devops/k8s.sh
  - source ./bin/devops/performance.sh
  #- source ./bin/devops/vercel.sh

build api:
  stage: build
  image: docker:stable-git
  services:
    - docker:27-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - install_dependencies
    - generate_jwt_keys
    - setup_docker_environment
    - build_api
  cache:
    - key:
        files:
          - api/composer.lock
      paths:
        - api/vendor/
  only:
    - branches
  except:
    variables:
      - $BUILD_DISABLED == "true"
       
build app:
  stage: build
  image: docker:stable-git
  services:
    - docker:27-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - install_dependencies
    - setup_docker_environment
    - build_app
#  cache:
#    - key:
#        files:
#          - app/pnpm-lock.yaml
#      paths:
#        - app/.pnpm-store/
#        - app/node_modules/
  only:
    - branches
  except:
    variables:
      - $BUILD_DISABLED == "true"

unit tests:
  image: $CI_REGISTRY_IMAGE/php:$CI_COMMIT_REF_SLUG
  stage: test
  script:
    - run_test_phpunit
  artifacts:
    reports:
      junit: api/build/logs/phpunit/junit.xml
  needs:
    - job: build api
      optional: true
  except:
    variables:
      - $TEST_DISABLED == "true"

behat tests:
  stage: test
  image: $CI_REGISTRY_IMAGE/php:$CI_COMMIT_REF_SLUG
  variables:
    COMPOSER_PACKAGIST_TOKEN: 1548c14cbc7ef945787cad19913d10ef73068d7cdc61ff19513bfb4f72ea
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: "password"
    POSTGRES_DB: test
    POSTGRES_HOST_AUTH_METHOD: trust
  allow_failure: false
  services:
    - postgres:14
  script:
    - setup_test_db_environment
    - run_test_behat
  dependencies: [ ]
  needs:
    - job: build api
      optional: true
  only:
    - branches
  artifacts:
    reports:
      junit: api/build/logs/behat/junit/default.xml
  except:
    variables:
      - $TEST_DISABLED == "true"

#review pwa:
#  stage: review
#  script:
#    - deploy_vercel_app review
#  environment:
#    name: review/$CI_COMMIT_REF_NAME/pwa
#    url: https://$CI_COMMIT_REF_SLUG-review.$KUBE_INGRESS_BASE_DOMAIN
#    auto_stop_in: 1 hour
#  only:
#    refs:
#      - branches
#  needs: []
#  except:
#    refs:
#      - main
#    variables:
#      - $REVIEW_DISABLED == "true"

review:
  stage: review
  script:
    - check_kube_domain
    - install_dependencies
    - generate_jwt_keys
    - helm_init
    - apply_kube_context
    - ensure_namespace
    - create_docker_pull_secret
    - deploy review
    - persist_environment_url
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_COMMIT_REF_SLUG-review.$KUBE_INGRESS_BASE_DOMAIN
    on_stop: stop review
  artifacts:
    paths: [ environment_url.txt ]
  only:
    refs:
      - branches
  needs:
    - job: 'build api'
      optional: true
    - job: 'build app'
      optional: true
    - job: 'unit tests'
      optional: true
    - job: 'behat tests'
      optional: true
  except:
    refs:
      - main
    variables:
      - $REVIEW_DISABLED == "true"

#staging pwa:
#  stage: staging
#  script:
#    - deploy_vercel_app staging
#  environment:
#    name: production/pwa
#    url: https://staging.$KUBE_INGRESS_BASE_DOMAIN
#    auto_stop_in: 1 hour
#  needs: []
#  only:
#    refs:
#      - main
#    variables:
#      - $STAGING_ENABLED == "true"
#  allow_failure: false

staging:
  retry: 1
  stage: staging
  script:
    - check_kube_domain
    - install_dependencies
    - generate_jwt_keys
    - helm_init
    - apply_kube_context
    - ensure_namespace
    - create_docker_pull_secret
    - deploy staging
  environment:
    name: production
    url: https://staging.$KUBE_INGRESS_BASE_DOMAIN
  needs:
    - job: 'build api'
      optional: true
    - job: 'build app'
      optional: true
    - job: 'unit tests'
      optional: true
    - job: 'behat tests'
      optional: true
  only:
    refs:
      - main
    variables:
      - $STAGING_ENABLED == "true"
  allow_failure: false

#production pwa:
#  stage: production
#  script:
#    - deploy_vercel_app
#  environment:
#    name: production/pwa
#    url: https://$KUBE_INGRESS_BASE_DOMAIN
#  when: manual
#  retry: 1
#  allow_failure: false
#  only:
#    refs:
#      - main
#  needs:
#    - job: 'staging pwa'
#      optional: true
#  except:
#    variables:
#      - $PRODUCTION_PWA_DISABLED == "true"

production:
  stage: production
  script:
    - check_kube_domain
    - install_dependencies
    - generate_jwt_keys
    - helm_init
    - apply_kube_context
    - ensure_namespace
    - create_docker_pull_secret
    - deploy
    - delete canary
    - delete staging
    - persist_environment_url
  environment:
    name: production
    url: https://$KUBE_INGRESS_BASE_DOMAIN
  artifacts:
    paths: [ environment_url.txt ]
  when: manual
  retry: 1
  allow_failure: false
  needs:
    - job: 'staging'
      optional: true
  only:
    refs:
      - main
  except:
    variables:
      - $PRODUCTION_API_DISABLED == "true"

performance:
  stage: performance
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:24.0.5-dind
  script:
    - setup_docker_environment
    - performance
  artifacts:
    paths:
      - performance.json
      - sitespeed-results/
  only:
    refs:
      - branches
    kubernetes: active
  when: manual
  except:
    variables:
      - $PERFORMANCE_DISABLED == "true"

stop review:
  stage: cleanup
  script:
    - install_dependencies
    - apply_kube_context
    - set_namespace
    - delete review
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
  needs: ['review']
  except:
    refs:
      - main
    variables:
      - $REVIEW_DISABLED == "true"

canary:
  stage: canary
  script:
    - check_kube_domain
    - install_dependencies
    - generate_jwt_keys
    - ensure_namespace
    - helm_init
    - apply_kube_context
    - create_docker_pull_secret
    - deploy canary
  environment:
    name: production
    url: https://$KUBE_INGRESS_BASE_DOMAIN
  when: manual
  needs:
    - job: 'staging'
      optional: true
  only:
    refs:
      - main
    variables:
      - $CANARY_ENABLED == "true"
