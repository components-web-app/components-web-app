## This has been modified from the API Platform template implementation
## More specifically from https://github.com/dunglas/demo-vulcain-api-platform
version: '3.7'

x-cache-from:
  - &api-cache-from
    cache_from:
      - ${PHP_IMAGE:-registry.gitlab.com/silverback-web-apps/cwa/php}
      - ${VARNISH_IMAGE:-registry.gitlab.com/silverback-web-apps/cwa/varnish}
      - ${CADDY_IMAGE:-registry.gitlab.com/silverback-web-apps/cwa/caddy}
  - &pwa-cache-from
    cache_from:
      - ${APP_IMAGE:-registry.gitlab.com/silverback-web-apps/cwa/pwa}

services:
  php:
    build:
      context: ./api
      target: cwa_php
      <<: *api-cache-from
    image: ${PHP_IMAGE:-registry.gitlab.com/silverback-web-apps/cwa/php}
    healthcheck:
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    depends_on:
      - db
    restart: unless-stopped
    environment:
      BLACKFIRE_CLIENT_ID: ~
      BLACKFIRE_CLIENT_TOKEN: ~
      # TODO: Remove environment variable once recipe is added to recipes-contrib repository
      SYMFONY_ENDPOINT: ~
    volumes:
      - ./api:/srv/api:rw,cached
      - ./api/_docker/php/conf.d/cwa.dev.ini:/usr/local/etc/php/cwa.dev.ini
      # if you develop on Linux, you may use a bind-mounted host directory instead
      # - ./api/var:/srv/api/var:rw
      - php_socket:/var/run/php
      - caddy_ca:/usr/local/share/ca-certificates
  
  # essentially acting as a merged mercure/vulcain layer here with https
  caddy:
    build:
      context: api/
      target: cwa_caddy
      <<: *api-cache-from
    image: ${CADDY_IMAGE:-registry.gitlab.com/silverback-web-apps/cwa/caddy}
    depends_on:
      - php
      - cache-proxy
    environment:
      VARNISH_UPSTREAM: ${VARNISH_UPSTREAM:-cache-proxy}
      SERVER_NAME: ${SERVER_NAME:-localhost:8443, localhost, caddy.local, :80}
      MERCURE_PUBLISHER_JWT_KEY: ${MERCURE_PUBLISHER_JWT_KEY:-!ChangeMe!}
      MERCURE_SUBSCRIBER_JWT_KEY: ${MERCURE_SUBSCRIBER_JWT_KEY:-!ChangeMe!}
      MERCURE_EXTRA_DIRECTIVES: |
        demo /srv/mercure-assets/
    restart: unless-stopped
    volumes:
      - php_socket:/var/run/php
      - caddy_data:/data
      - caddy_config:/config
      - caddy_certs:/data/caddy/certificates/local/localhost
      - caddy_ca:/usr/local/share/ca-certificates
      - ./api/_docker/caddy/Caddyfile:/etc/caddy/Caddyfile:rw
    ports:
      # HTTP
      - target: 80
        published: 8080
        protocol: tcp
      # HTTPS
      - target: 443
        published: 8443
        protocol: tcp
      # HTTP/3
      - target: 443
        published: 8443
        protocol: udp

  # Directs back to caddy which will send to php
  cache-proxy:
    build:
      context: ./api
      target: cwa_varnish
      <<: *api-cache-from
    image: ${VARNISH_IMAGE:-registry.gitlab.com/silverback-web-apps/cwa/varnish}
    restart: unless-stopped
    environment:
      UPSTREAM: caddy
      UPSTREAM_PORT: 80
      PHP_SERVICE: php
    # for cors_allow_origin env variable sharing
    env_file:
      - api/.env
    tmpfs:
      - /usr/local/var/varnish:exec

  # In production the pwa is deployed separately so we will not put behind caddy
  # We will use the caddy certs for localhost though in dev to serve over https
  pwa:
    build:
      context: ./pwa
      target: cwa_pwa
      <<: *pwa-cache-from
    image: ${PWA_IMAGE:-registry.gitlab.com/silverback-web-apps/cwa/pwa}
    restart: unless-stopped
    volumes:
      - ./pwa:/usr/src/pwa:rw,cached
      - caddy_certs:/certs:ro
      - caddy_ca:/ca-certs
    environment:
      NODE_ENV: ~
      LOCAL_TLS: ~
      NODE_TLS_REJECT_UNAUTHORIZED: ~
      # we have to allow the https port as axios module will change http to https
      # so caddy must also accept this host with ssl
      API_URL: https://caddy.local
      API_URL_BROWSER: https://localhost:8443
    ports:
      - target: 3000
        published: 443
        protocol: tcp
    links:
      - "caddy:caddy.local"

  db:
    image: postgres:12.2-alpine
    environment:
      - POSTGRES_MULTIPLE_DATABASES=api,api_test
      - POSTGRES_USER=api-platform
      - POSTGRES_PASSWORD=!ChangeMe!
    volumes:
      - ./api/_docker/postgres-init-scripts:/docker-entrypoint-initdb.d
      - db_data:/var/lib/postgresql/data:rw,delegated
    ports:
      - target: 5432
        published: 5432
        protocol: tcp

  blackfire:
    image: blackfire/blackfire
    ports: ["8707"]
    environment:
      # Exposes BLACKFIRE_* environment variables from the host
      BLACKFIRE_SERVER_ID: ~
      BLACKFIRE_SERVER_TOKEN: ~
      # BLACKFIRE_LOG_LEVEL: 4

volumes:
  php_socket:
  caddy_data:
  caddy_config:
  caddy_certs:
  caddy_ca:
  db_data:
