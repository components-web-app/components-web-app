# Info: Reload in live Docker using `caddy reload --config /etc/caddy/Caddyfile --adapter caddyfile`
# Future: Give some nicer server errors with HTML responses https://caddyserver.com/docs/caddyfile/directives/handle_errors
# 502 for php is down, 404 file server file not found etc.

# Global
{
	# Debug
	{$DEBUG}
	# Custom global directives
    {$GLOBAL_DIRECTIVES}
    servers {
        trusted_proxies static {$TRUSTED_PROXIES}
    }
}

caddy-probe.local:80 {
	@health_check {
		host caddy-probe.local
		path /health-check
	}
	# customisable log level with environment
    log {
        level {$LOG_LEVEL:"error"}
    }
    respond @health_check 200 {
        close
    }
}

# define single site using environment variable
{$SERVER_NAME} {
	# named matchers
	@do_varnish_pass {
		header !X-Caddy-Forwarded
	}

	@internal {
        header_regexp internal host ([A-Za-z\-]+\.local(?:\:[0-9]{1,4})?)
    }

	# customisable log level with environment
	log {
		level {$LOG_LEVEL:"info"}
	}

	# preserve orders
	route {
		root * /srv/api/public

		mercure @do_varnish_pass {
			# Transport to use (default to Bolt)
			transport_url {$MERCURE_TRANSPORT_URL:bolt:///data/mercure.db}
			# Publisher JWT key
			publisher_jwt {env.MERCURE_PUBLISHER_JWT_KEY} {env.MERCURE_PUBLISHER_JWT_ALG}
			# Subscriber JWT key
			subscriber_jwt {env.MERCURE_SUBSCRIBER_JWT_KEY} {env.MERCURE_SUBSCRIBER_JWT_ALG}
			# Allow anonymous subscribers (double-check that it's what you want)
			anonymous
			# Enable the subscription API (double-check that it's what you want)
			subscriptions
			# Cors origins
			cors_origins {$MERCURE_CORS_ORIGIN:*}
			# Extra directives
			{$MERCURE_EXTRA_DIRECTIVES}
		}
		#vulcain @do_varnish_pass

		# do the cache pass
		#reverse_proxy @do_varnish_pass {
		#	to {$VARNISH_UPSTREAM}
		#	health_uri /healthz
		#	health_interval 5s
		#	health_timeout 20s
		#	fail_duration 5s
		#	header_up X-Caddy-Forwarded 1
		#}

        # if ssr request using "caddy.local" php needs to know browser name for headers for docs.json etc.
		request_header @internal host {$BROWSER_SERVER_NAME}

		php_fastcgi unix//var/run/php/php-fpm.sock {
			trusted_proxies {$TRUSTED_PROXIES}
		}
        encode zstd gzip
        file_server
	}
}
